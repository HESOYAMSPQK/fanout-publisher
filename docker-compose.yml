version: '3.9'

services:
  # ===== PostgreSQL =====
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fanout_publisher}
      POSTGRES_USER: ${POSTGRES_USER:-fanout_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-fanout_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fanout_user} -d ${POSTGRES_DB:-fanout_publisher}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fanout-network

  # ===== Redis =====
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fanout-network

  # ===== MinIO (S3-совместимое хранилище) =====
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9002:9000"
      - "9003:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - fanout-network

  # ===== Telegram Bot API (локальный сервер) =====
  telegram-bot-api:
    image: aiogram/telegram-bot-api:latest
    environment:
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_LOCAL: "1"
    volumes:
      - telegram_data:/var/lib/telegram-bot-api
    ports:
      - "8081:8081"
    restart: unless-stopped
    networks:
      - fanout-network

  # ===== FastAPI Application =====
  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - ENV=${ENV:-development}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SERVICE_TOKEN=${SERVICE_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - MINIO_SECURE=${MINIO_SECURE:-false}
      - API_BASE_URL=${API_BASE_URL}
      - YOUTUBE_CLIENT_ID=${YOUTUBE_CLIENT_ID}
      - YOUTUBE_CLIENT_SECRET=${YOUTUBE_CLIENT_SECRET}
      - YOUTUBE_REFRESH_TOKEN=${YOUTUBE_REFRESH_TOKEN}
      - YOUTUBE_DEFAULT_PRIVACY=${YOUTUBE_DEFAULT_PRIVACY:-private}
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fanout-network

  # ===== Celery Worker =====
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A workers.celery_app worker --loglevel=info --concurrency=2
    environment:
      - ENV=${ENV:-development}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - MINIO_SECURE=${MINIO_SECURE:-false}
      - YOUTUBE_CLIENT_ID=${YOUTUBE_CLIENT_ID}
      - YOUTUBE_CLIENT_SECRET=${YOUTUBE_CLIENT_SECRET}
      - YOUTUBE_REFRESH_TOKEN=${YOUTUBE_REFRESH_TOKEN}
      - YOUTUBE_DEFAULT_PRIVACY=${YOUTUBE_DEFAULT_PRIVACY:-private}
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      api:
        condition: service_started
    restart: unless-stopped
    networks:
      - fanout-network

  # ===== Telegram Bot =====
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m bot.main
    environment:
      - ENV=${ENV:-development}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SERVICE_TOKEN=${SERVICE_TOKEN}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_LOCAL_API_URL=
      - TELEGRAM_ADMIN_ID=${TELEGRAM_ADMIN_ID}
      - API_BASE_URL=${API_BASE_URL}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - MINIO_SECURE=${MINIO_SECURE:-false}
    volumes:
      - .:/app
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - fanout-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  telegram_data:

networks:
  fanout-network:
    driver: bridge

