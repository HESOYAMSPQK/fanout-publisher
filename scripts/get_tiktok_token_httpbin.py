#!/usr/bin/env python3
"""
–ü–æ–ª—É—á–µ–Ω–∏–µ TikTok Access Token —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º httpbin.org
–î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ localhost –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import hashlib
import base64
import secrets
import requests
import webbrowser
from urllib.parse import urlencode, parse_qs, urlparse

print("=" * 70)
print("üîê TikTok Access Token - –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º httpbin.org")
print("=" * 70)
print("\n‚ö†Ô∏è  –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç httpbin.org –≤–º–µ—Å—Ç–æ localhost")
print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ, –µ—Å–ª–∏ localhost –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n")

# –®–∞–≥ 1: –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
print("üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ TikTok Developer Portal:\n")

CLIENT_KEY = input("Client Key: ").strip()
CLIENT_SECRET = input("Client Secret: ").strip()

if not CLIENT_KEY or not CLIENT_SECRET:
    print("‚ùå –û—à–∏–±–∫–∞: Client Key –∏ Client Secret –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")
    exit(1)

# –í–ê–ñ–ù–û: –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç URL –≤ TikTok Developer Portal!
REDIRECT_URI = "https://httpbin.org/get"
STATE = secrets.token_urlsafe(16)

print("\n" + "=" * 70)
print("‚ö†Ô∏è  –í–ê–ñ–ù–û! –ü–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º:")
print("=" * 70)
print("\n1. –û—Ç–∫—Ä–æ–π—Ç–µ TikTok Developer Portal")
print("2. –í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí Login Kit ‚Üí Settings")
print("3. –î–æ–±–∞–≤—å—Ç–µ Redirect URL:")
print(f"   {REDIRECT_URI}")
print("4. –ù–∞–∂–º–∏—Ç–µ Save")
print("\n" + "=" * 70)

input("\nüîµ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Redirect URL –Ω–∞–∂–º–∏—Ç–µ Enter...")

# –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PKCE
print("\nüîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PKCE –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")

code_verifier = secrets.token_urlsafe(64)
code_challenge_bytes = hashlib.sha256(code_verifier.encode('utf-8')).digest()
code_challenge = base64.urlsafe_b64encode(code_challenge_bytes).decode('utf-8').rstrip('=')

print(f"‚úÖ Code verifier —Å–æ–∑–¥–∞–Ω")
print(f"‚úÖ Code challenge —Å–æ–∑–¥–∞–Ω")

# –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ Authorization URL
auth_params = {
    'client_key': CLIENT_KEY,
    'scope': 'user.info.basic,video.upload,video.publish',
    'response_type': 'code',
    'redirect_uri': REDIRECT_URI,
    'state': STATE,
    'code_challenge': code_challenge,
    'code_challenge_method': 'S256'
}

auth_url = f"https://www.tiktok.com/v2/auth/authorize/?{urlencode(auth_params)}"

print("\n" + "=" * 70)
print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
print("=" * 70)
print("\n1. –°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä")
print("2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ TikTok")
print("3. –ù–∞–∂–º–∏—Ç–µ 'Authorize'")
print("4. –í—ã —É–≤–∏–¥–∏—Ç–µ JSON –æ—Ç httpbin.org")
print("5. –ù–∞–π–¥–∏—Ç–µ –≤ JSON —Å—Ç—Ä–æ–∫—É —Å 'code'")
print("6. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ code")
print("\n" + "=" * 70)

input("\nüîµ –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä...")

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
webbrowser.open(auth_url)

print("\n‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç!")
print("\nüìã –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ JSON –≤–∏–¥–∞:")
print('{')
print('  "args": {')
print('    "code": "–í–ê–®_–ö–û–î_–ó–î–ï–°–¨",')
print('    "scopes": "...",')
print('    "state": "..."')
print('  }')
print('}')
print("\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'code' (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫)")

# –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
authorization_code = input("\nüìã –í—Å—Ç–∞–≤—å—Ç–µ code —Å—é–¥–∞:\n").strip()

if not authorization_code:
    print("‚ùå Code –Ω–µ –≤–≤–µ–¥–µ–Ω!")
    exit(1)

print(f"\n‚úÖ Code –ø–æ–ª—É—á–µ–Ω: {authorization_code[:20]}...")

# –®–∞–≥ 5: –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
print("\nüîÑ –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ Access Token...")

token_url = "https://open.tiktokapis.com/v2/oauth/token/"
token_data = {
    'client_key': CLIENT_KEY,
    'client_secret': CLIENT_SECRET,
    'code': authorization_code,
    'grant_type': 'authorization_code',
    'redirect_uri': REDIRECT_URI,
    'code_verifier': code_verifier
}

try:
    response = requests.post(token_url, data=token_data)
    result = response.json()
    
    if response.status_code == 200 and 'access_token' in result:
        print("\n" + "=" * 70)
        print("üéâ –£–°–ü–ï–•! –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!")
        print("=" * 70)
        
        access_token = result['access_token']
        refresh_token = result.get('refresh_token', '')
        
        print(f"\n‚úÖ Access Token:")
        print(f"   {access_token}")
        
        if refresh_token:
            print(f"\n‚úÖ Refresh Token:")
            print(f"   {refresh_token}")
        
        print("\n" + "=" * 70)
        print("üìù –°–ö–û–ü–ò–†–£–ô–¢–ï –í .env –§–ê–ô–õ:")
        print("=" * 70)
        print(f"\nTIKTOK_ACCESS_TOKEN={access_token}")
        if refresh_token:
            print(f"TIKTOK_REFRESH_TOKEN={refresh_token}")
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        auto_save = input("\nüíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª? (y/n): ").strip().lower()
        
        if auto_save == 'y':
            try:
                from pathlib import Path
                
                env_path = Path('.env')
                
                if env_path.exists():
                    env_content = env_path.read_text(encoding='utf-8')
                else:
                    env_content = ""
                
                lines = env_content.split('\n')
                updated_access = False
                updated_refresh = False
                
                for i, line in enumerate(lines):
                    if line.startswith('TIKTOK_ACCESS_TOKEN='):
                        lines[i] = f'TIKTOK_ACCESS_TOKEN={access_token}'
                        updated_access = True
                    elif refresh_token and line.startswith('TIKTOK_REFRESH_TOKEN='):
                        lines[i] = f'TIKTOK_REFRESH_TOKEN={refresh_token}'
                        updated_refresh = True
                
                if not updated_access:
                    if env_content and not env_content.endswith('\n'):
                        lines.append('')
                    lines.append(f'TIKTOK_ACCESS_TOKEN={access_token}')
                
                if refresh_token and not updated_refresh:
                    lines.append(f'TIKTOK_REFRESH_TOKEN={refresh_token}')
                
                new_content = '\n'.join(lines)
                env_path.write_text(new_content, encoding='utf-8')
                
                print("‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω!")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
        
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:")
        print("=" * 70)
        
        if 'error' in result:
            print(f"–û—à–∏–±–∫–∞: {result['error']}")
        if 'error_description' in result:
            print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {result['error_description']}")
        
        import json
        print("\n–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

print("\n" + "=" * 70)

