#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è TikTok Access Token —á–µ—Ä–µ–∑ OAuth 2.0 —Å ngrok (HTTPS)

TikTok —Ç—Ä–µ–±—É–µ—Ç HTTPS –¥–ª—è redirect URI, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º ngrok –¥–ª—è —Ç—É–Ω–Ω–µ–ª—è.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ngrok: https://ngrok.com/download
2. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ ngrok.com –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ URL

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/get_tiktok_token_ngrok.py
"""

import webbrowser
import urllib.parse
from http.server import HTTPServer, BaseHTTPRequestHandler
import sys
import requests
import secrets
import subprocess
import time
import json
import re
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    # –î–ª—è Python 3.7+
    if hasattr(sys.stdout, 'reconfigure'):
        try:
            sys.stdout.reconfigure(encoding='utf-8')
            sys.stderr.reconfigure(encoding='utf-8')
        except:
            pass
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
    try:
        os.system('chcp 65001 >nul 2>&1')
    except:
        pass

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TIKTOK_CLIENT_KEY = None
TIKTOK_CLIENT_SECRET = None
LOCAL_PORT = 8080

# OAuth endpoints
AUTHORIZE_URL = "https://www.tiktok.com/v2/auth/authorize/"
TOKEN_URL = "https://open.tiktokapis.com/v2/oauth/token/"

# Scopes –¥–ª—è Content Posting API
SCOPES = ['user.info.basic', 'video.upload', 'video.publish']

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
auth_code = None
ngrok_url = None
ngrok_process = None


class OAuthCallbackHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OAuth callback –æ—Ç TikTok"""
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ —Å authorization code"""
        global auth_code
        
        # –ü–∞—Ä—Å–∏–º URL
        parsed_url = urllib.parse.urlparse(self.path)
        query_params = urllib.parse.parse_qs(parsed_url.query)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ code
        if 'code' in query_params:
            auth_code = query_params['code'][0]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É—Å–ø–µ—Ö–æ–º
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            
            html = """
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>TikTok OAuth - –£—Å–ø–µ—à–Ω–æ!</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        max-width: 800px;
                        margin: 50px auto;
                        padding: 20px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    }
                    .container {
                        background: white;
                        padding: 40px;
                        border-radius: 20px;
                        box-shadow: 0 10px 40px rgba(0,0,0,0.2);
                        text-align: center;
                    }
                    h1 { 
                        color: #00f7ef;
                        font-size: 2.5em;
                        margin-bottom: 20px;
                    }
                    .success { 
                        color: #28a745;
                        font-size: 1.3em;
                        margin: 20px 0;
                    }
                    .icon {
                        font-size: 4em;
                        margin: 20px 0;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="icon">üéâ</div>
                    <h1>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è TikTok —É—Å–ø–µ—à–Ω–∞!</h1>
                    <p class="success">Authorization code –ø–æ–ª—É—á–µ–Ω!</p>
                    <p>–°–µ–π—á–∞—Å –ø–æ–ª—É—á–∞–µ–º access token...</p>
                    <p>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.</p>
                    <p class="success">–ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.</p>
                </div>
            </body>
            </html>
            """
            
            self.wfile.write(html.encode('utf-8'))
            
        elif 'error' in query_params:
            # –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            error = query_params.get('error', ['Unknown error'])[0]
            error_desc = query_params.get('error_description', [''])[0]
            
            self.send_response(400)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            
            html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>TikTok OAuth - –û—à–∏–±–∫–∞</title>
                <style>
                    body {{
                        font-family: Arial, sans-serif;
                        max-width: 800px;
                        margin: 50px auto;
                        padding: 20px;
                        background: #f5f5f5;
                    }}
                    .container {{
                        background: white;
                        padding: 30px;
                        border-radius: 10px;
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    }}
                    .error {{ color: #dc3545; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <h1 class="error">‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h1>
                    <p><strong>–û—à–∏–±–∫–∞:</strong> {error}</p>
                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {error_desc}</p>
                    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</p>
                </div>
            </body>
            </html>
            """
            
            self.wfile.write(html.encode('utf-8'))
    
    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        pass


def check_ngrok_installed():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ ngrok"""
    try:
        result = subprocess.run(['ngrok', 'version'], 
                              capture_output=True, 
                              text=True,
                              timeout=5)
        return result.returncode == 0
    except (FileNotFoundError, subprocess.TimeoutExpired):
        return False


def check_ngrok_auth():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ auth token –¥–ª—è ngrok"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        result = subprocess.run(['ngrok', 'config', 'check'], 
                              capture_output=True, 
                              text=True,
                              timeout=5)
        
        output = result.stdout + result.stderr
        
        # –ï—Å–ª–∏ –≤ –≤—ã–≤–æ–¥–µ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–æ authtoken - —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç
        if 'authtoken' in output.lower() or 'authentication' in output.lower():
            return False
        
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
        if result.returncode == 0:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –Ω–∞–ø—Ä—è–º—É—é
            config_paths = [
                os.path.expanduser('~/.ngrok2/ngrok.yml'),
                os.path.expanduser('~/Library/Application Support/ngrok/ngrok.yml'),
                os.path.join(os.getenv('LOCALAPPDATA', ''), 'ngrok', 'ngrok.yml')
            ]
            
            for config_path in config_paths:
                if os.path.exists(config_path):
                    try:
                        with open(config_path, 'r') as f:
                            content = f.read()
                            if 'authtoken:' in content or 'authtoken :' in content:
                                return True
                    except:
                        pass
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —Ç–æ–∫–µ–Ω–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç
            return False
        
        return False
    except:
        return False


def setup_ngrok_auth():
    """–ü–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ngrok auth token"""
    print()
    print("‚ö†Ô∏è  ngrok —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ auth token!")
    print("=" * 70)
    print()
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ù–ê–°–¢–†–û–ô–ö–ï:")
    print("-" * 70)
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ: https://dashboard.ngrok.com/signup")
    print("2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ GitHub)")
    print("3. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ: https://dashboard.ngrok.com/get-started/your-authtoken")
    print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à authtoken")
    print()
    print("-" * 70)
    
    auth_token = input("üìù –í—Å—Ç–∞–≤—å—Ç–µ authtoken (–∏–ª–∏ 'skip' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ–∑ –Ω–µ–≥–æ): ").strip()
    
    if auth_token.lower() == 'skip':
        print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ auth token (–º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)...")
        return False
    
    if not auth_token:
        print("‚ùå Auth token –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return False
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º auth token
        result = subprocess.run(
            ['ngrok', 'config', 'add-authtoken', auth_token],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode == 0:
            print("‚úÖ Auth token —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def start_ngrok(port):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å ngrok –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL"""
    global ngrok_process
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è –Ω–∞ –ø–æ—Ä—Ç {port}...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞
    ngrok_process = subprocess.Popen(
        ['ngrok', 'http', str(port)],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        creationflags=subprocess.CREATE_NO_WINDOW if sys.platform == 'win32' else 0
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —É–º–µ—Ä —Å—Ä–∞–∑—É
    time.sleep(0.5)
    if ngrok_process.poll() is not None:
        stdout, stderr = ngrok_process.communicate()
        raise Exception(f"ngrok –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:\nSTDOUT: {stdout}\nSTDERR: {stderr}")
    
    # –ñ–¥–µ–º –ø–æ–∫–∞ ngrok –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è (—Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏)
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ ngrok API...")
    max_attempts = 20  # –ú–∞–∫—Å–∏–º—É–º 20 –ø–æ–ø—ã—Ç–æ–∫ (20 —Å–µ–∫—É–Ω–¥)
    
    for attempt in range(max_attempts):
        time.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∂–∏–≤
        if ngrok_process.poll() is not None:
            stdout, stderr = ngrok_process.communicate()
            raise Exception(f"ngrok –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è:\nSTDOUT: {stdout}\nSTDERR: {stderr}")
        
        try:
            response = requests.get('http://127.0.0.1:4040/api/tunnels', timeout=2)
            data = response.json()
            
            if 'tunnels' in data and len(data['tunnels']) > 0:
                print("‚úÖ ngrok API –æ—Ç–≤–µ—Ç–∏–ª!")
                # –ò—â–µ–º HTTPS —Ç—É–Ω–Ω–µ–ª—å
                for tunnel in data['tunnels']:
                    if tunnel['proto'] == 'https':
                        return tunnel['public_url']
                
                # –ï—Å–ª–∏ –Ω–µ—Ç HTTPS, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
                return data['tunnels'][0]['public_url']
        
        except requests.exceptions.ConnectionError:
            # ngrok –µ—â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –∂–¥–µ–º –µ—â–µ
            if attempt < max_attempts - 1:
                if attempt % 3 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 3 –ø–æ–ø—ã—Ç–∫–∏
                    print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}...")
                continue
            else:
                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ ngrok
                raise Exception(
                    "ngrok –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "  1. –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω authtoken (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ ngrok.com)\n"
                    "  2. –ü–æ—Ä—Ç 4040 —É–∂–µ –∑–∞–Ω—è—Ç\n"
                    "  3. Firewall –±–ª–æ–∫–∏—Ä—É–µ—Ç ngrok\n"
                    "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å ngrok –≤—Ä—É—á–Ω—É—é:\n"
                    f"  ngrok http {port}\n"
                )
        
        except requests.exceptions.Timeout:
            if attempt < max_attempts - 1:
                continue
            else:
                raise Exception("Timeout –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ ngrok API")
        
        except Exception as e:
            if attempt < max_attempts - 1:
                continue
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ngrok URL: {e}")
    
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –æ—Ç ngrok")


def stop_ngrok():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ngrok"""
    global ngrok_process
    if ngrok_process:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ngrok...")
        ngrok_process.terminate()
        try:
            ngrok_process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            ngrok_process.kill()


def exchange_code_for_token(code: str, redirect_uri: str) -> dict:
    """–û–±–º–µ–Ω—è—Ç—å authorization code –Ω–∞ access token"""
    data = {
        'client_key': TIKTOK_CLIENT_KEY,
        'client_secret': TIKTOK_CLIENT_SECRET,
        'code': code,
        'grant_type': 'authorization_code',
        'redirect_uri': redirect_uri
    }
    
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cache-Control': 'no-cache'
    }
    
    try:
        response = requests.post(TOKEN_URL, data=data, headers=headers, timeout=30)
        result = response.json()
        
        if 'error' in result:
            raise Exception(f"TikTok API Error: {result.get('error')} - {result.get('error_description')}")
        
        return result
        
    except requests.RequestException as e:
        raise Exception(f"Token exchange request failed: {str(e)}")


def get_tiktok_access_token():
    """–ü–æ–ª—É—á–∏—Ç—å TikTok Access Token —á–µ—Ä–µ–∑ OAuth 2.0 —Å ngrok"""
    global TIKTOK_CLIENT_KEY, TIKTOK_CLIENT_SECRET, auth_code, ngrok_url
    
    print("="*70)
    print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ TikTok Access Token —á–µ—Ä–µ–∑ ngrok (HTTPS)")
    print("="*70)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ngrok
    if not check_ngrok_installed():
        print("‚ùå ngrok –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print()
        print("üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ngrok:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ: https://ngrok.com/download")
        print("   2. –°–∫–∞—á–∞–π—Ç–µ –¥–ª—è Windows")
        print("   3. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –≤ –ø–∞–ø–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, C:\\ngrok)")
        print("   4. –î–æ–±–∞–≤—å—Ç–µ –ø—É—Ç—å –≤ PATH –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ –ø–∞–ø–∫—É —Å Python")
        print()
        print("   –ò–ª–∏ —á–µ—Ä–µ–∑ Chocolatey:")
        print("   choco install ngrok")
        print()
        sys.exit(1)
    
    print("‚úÖ ngrok —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º auth token
    if not check_ngrok_auth():
        if not setup_ngrok_auth():
            print()
            print("‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ auth token...")
            print("   (–ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ ngrok.com)")
    
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º credentials
    print("üì± –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ TikTok Developer Portal:")
    print("-" * 70)
    
    TIKTOK_CLIENT_KEY = input("Client Key: ").strip()
    if not TIKTOK_CLIENT_KEY:
        print("‚ùå Client Key –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        sys.exit(1)
    
    TIKTOK_CLIENT_SECRET = input("Client Secret: ").strip()
    if not TIKTOK_CLIENT_SECRET:
        print("‚ùå Client Secret –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        sys.exit(1)
    
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
        ngrok_url = start_ngrok(LOCAL_PORT)
        
        print(f"‚úÖ ngrok —Ç—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω!")
        print(f"üåê –ü—É–±–ª–∏—á–Ω—ã–π URL: {ngrok_url}")
        print()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º redirect URI
        redirect_uri = f"{ngrok_url}/callback"
        
        print("‚ö†Ô∏è  –í–ê–ñ–ù–û! –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç Redirect URI –≤ TikTok Developer Portal:")
        print("=" * 70)
        print(f"   {redirect_uri}")
        print("=" * 70)
        print()
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ: https://developers.tiktok.com/")
        print("2. –í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí Login Kit ‚Üí Redirect URLs")
        print("3. –ù–∞–∂–º–∏—Ç–µ 'Add redirect URL'")
        print(f"4. –í—Å—Ç–∞–≤—å—Ç–µ: {redirect_uri}")
        print("5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ")
        print()
        
        input("‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ redirect URI... ")
        
        print()
        print("üåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Authorization URL...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º state
        state = secrets.token_urlsafe(32)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º OAuth URL
        auth_params = {
            'client_key': TIKTOK_CLIENT_KEY,
            'scope': ','.join(SCOPES),
            'response_type': 'code',
            'redirect_uri': redirect_uri,
            'state': state
        }
        
        auth_url = f"{AUTHORIZE_URL}?{urllib.parse.urlencode(auth_params)}"
        
        print("‚úÖ Authorization URL —Å–æ–∑–¥–∞–Ω")
        print()
        print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        print()
        print("‚ö†Ô∏è  –í–ê–ñ–ù–û –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –†–æ—Å—Å–∏–∏:")
        print("   TikTok –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ VPN!")
        print("   –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç - –≤–∫–ª—é—á–∏—Ç–µ VPN.")
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        server = HTTPServer(('localhost', LOCAL_PORT), OAuthCallbackHandler)
        
        print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:{LOCAL_PORT}")
        print(f"‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π URL: {ngrok_url}")
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        print()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        webbrowser.open(auth_url)
        
        # –ñ–¥–µ–º callback (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
        server.timeout = 120  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        server.handle_request()
        server.server_close()
        
        if not auth_code:
            print("\n‚ö†Ô∏è  Authorization code –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            print("   (–í–æ–∑–º–æ–∂–Ω–æ, ngrok –ø–æ–∫–∞–∑–∞–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)")
            print()
            print("üìã –í—Å—Ç–∞–≤—å—Ç–µ callback URL –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é:")
            print("   (–ü–æ–ª–Ω—ã–π URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å https://...)")
            print()
            
            callback_url = input("Callback URL: ").strip()
            
            if callback_url:
                try:
                    parsed = urllib.parse.urlparse(callback_url)
                    params = urllib.parse.parse_qs(parsed.query)
                    
                    if 'code' in params:
                        auth_code = params['code'][0]
                        auth_code = urllib.parse.unquote(auth_code)
                        print(f"\n‚úÖ –ö–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ URL!")
                    else:
                        print("\n‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä 'code' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL")
                        sys.exit(1)
                
                except Exception as e:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {e}")
                    sys.exit(1)
            else:
                print("\n‚ùå URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                sys.exit(1)
        
        print("\n‚úÖ Authorization code –ø–æ–ª—É—á–µ–Ω!")
        print("üîÑ –û–±–º–µ–Ω–∏–≤–∞–µ–º code –Ω–∞ access token...")
        print()
        
        # –û–±–º–µ–Ω–∏–≤–∞–µ–º code –Ω–∞ access token
        token_data = exchange_code_for_token(auth_code, redirect_uri)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (TikTok API v2)
        if 'data' in token_data:
            token_info = token_data['data']
        else:
            token_info = token_data
        
        access_token = token_info.get('access_token')
        refresh_token = token_info.get('refresh_token')
        expires_in = token_info.get('expires_in', 0)
        open_id = token_info.get('open_id', '')
        
        if not access_token:
            raise Exception("Access token not found in response")
        
        print("="*70)
        print("‚úÖ TikTok Access Token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
        print("="*70)
        print()
        print(f"üÜî Open ID: {open_id}")
        print(f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_in} —Å–µ–∫ ({expires_in // 3600} —á–∞—Å–æ–≤)")
        print()
        print(f"‚úÖ Access Token:")
        print(access_token)
        
        if refresh_token:
            print()
            print(f"‚úÖ Refresh Token:")
            print(refresh_token)
        
        print()
        print("="*70)
        print("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ .env:")
        print("="*70)
        print(f"TIKTOK_CLIENT_KEY={TIKTOK_CLIENT_KEY}")
        print(f"TIKTOK_CLIENT_SECRET={TIKTOK_CLIENT_SECRET}")
        print(f"TIKTOK_ACCESS_TOKEN={access_token}")
        
        if refresh_token:
            print(f"TIKTOK_REFRESH_TOKEN={refresh_token}")
        
        print("="*70)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ .env
        try:
            save = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ .env —Ñ–∞–π–ª? (y/n): ").strip().lower()
            
            if save == 'y':
                from pathlib import Path
                
                env_path = Path('.env')
                
                if env_path.exists():
                    env_content = env_path.read_text(encoding='utf-8')
                else:
                    env_content = ""
                
                lines = env_content.split('\n')
                updated = {
                    'client_key': False,
                    'client_secret': False,
                    'access_token': False,
                    'refresh_token': False
                }
                
                for i, line in enumerate(lines):
                    if line.startswith('TIKTOK_CLIENT_KEY='):
                        lines[i] = f'TIKTOK_CLIENT_KEY={TIKTOK_CLIENT_KEY}'
                        updated['client_key'] = True
                    elif line.startswith('TIKTOK_CLIENT_SECRET='):
                        lines[i] = f'TIKTOK_CLIENT_SECRET={TIKTOK_CLIENT_SECRET}'
                        updated['client_secret'] = True
                    elif line.startswith('TIKTOK_ACCESS_TOKEN='):
                        lines[i] = f'TIKTOK_ACCESS_TOKEN={access_token}'
                        updated['access_token'] = True
                    elif line.startswith('TIKTOK_REFRESH_TOKEN='):
                        if refresh_token:
                            lines[i] = f'TIKTOK_REFRESH_TOKEN={refresh_token}'
                            updated['refresh_token'] = True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
                if not updated['client_key']:
                    lines.append(f'TIKTOK_CLIENT_KEY={TIKTOK_CLIENT_KEY}')
                if not updated['client_secret']:
                    lines.append(f'TIKTOK_CLIENT_SECRET={TIKTOK_CLIENT_SECRET}')
                if not updated['access_token']:
                    lines.append(f'TIKTOK_ACCESS_TOKEN={access_token}')
                if refresh_token and not updated['refresh_token']:
                    lines.append(f'TIKTOK_REFRESH_TOKEN={refresh_token}')
                
                new_content = '\n'.join(lines)
                env_path.write_text(new_content, encoding='utf-8')
                
                print("‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
        return access_token
        
    except KeyboardInterrupt:
        print("\n\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
        
    finally:
        stop_ngrok()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        get_tiktok_access_token()
        print("\nüéâ –ì–æ—Ç–æ–≤–æ!")
    except KeyboardInterrupt:
        print("\n\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
    finally:
        stop_ngrok()


if __name__ == "__main__":
    main()

