#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Telegram Bot API
"""
import os
import sys
import requests
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

load_dotenv()

def check_env_vars():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = {
        'TELEGRAM_BOT_TOKEN': '–¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞',
        'TELEGRAM_API_ID': 'API ID –∏–∑ my.telegram.org',
        'TELEGRAM_API_HASH': 'API Hash –∏–∑ my.telegram.org',
        'TELEGRAM_LOCAL_API_URL': 'URL –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Bot API'
    }
    
    missing = []
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value or value == '':
            missing.append(f"  ‚ùå {var} - {description}")
            print(f"  ‚ùå {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            # –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if var in ['TELEGRAM_BOT_TOKEN', 'TELEGRAM_API_HASH']:
                display_value = value[:10] + '...' if len(value) > 10 else '***'
            else:
                display_value = value
            print(f"  ‚úÖ {var} = {display_value}")
    
    if missing:
        print("\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        for m in missing:
            print(m)
        print("\n–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –≤–∞—à .env —Ñ–∞–π–ª!")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n")
    return True


def check_local_api():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Bot API"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Bot API...")
    
    local_api_url = os.getenv('TELEGRAM_LOCAL_API_URL', '')
    
    if not local_api_url:
        print("  ‚ö†Ô∏è  TELEGRAM_LOCAL_API_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("  ‚ÑπÔ∏è  –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Telegram API (–ª–∏–º–∏—Ç 50 –ú–ë)")
        return False
    
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ —Ö–æ—Å—Ç–µ, –∑–∞–º–µ–Ω—è–µ–º Docker –∏–º—è –Ω–∞ localhost
    if 'telegram-bot-api:' in local_api_url:
        local_api_url = local_api_url.replace('telegram-bot-api:', 'localhost:')
        print(f"  ‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost –≤–º–µ—Å—Ç–æ Docker –∏–º–µ–Ω–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É API
        # Telegram Bot API –Ω–µ –∏–º–µ–µ—Ç /healthcheck, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
        test_url = local_api_url.rstrip('/')
        
        print(f"  –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {test_url}...")
        response = requests.get(test_url, timeout=5)
        
        # Telegram Bot API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404 –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        # –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ —Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç
        if response.status_code in [200, 404]:
            if response.status_code == 404:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç –æ—Ç Telegram Bot API
                try:
                    data = response.json()
                    if 'error_code' in data or 'ok' in data:
                        print(f"  ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π Bot API –¥–æ—Å—Ç—É–ø–µ–Ω!")
                        return True
                except:
                    pass
            else:
                print(f"  ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π Bot API –¥–æ—Å—Ç—É–ø–µ–Ω!")
                return True
            
            print(f"  ‚ö†Ô∏è  –õ–æ–∫–∞–ª—å–Ω—ã–π Bot API –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º {response.status_code}")
            return False
        else:
            print(f"  ‚ö†Ô∏è  –õ–æ–∫–∞–ª—å–Ω—ã–π Bot API –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print(f"  ‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {local_api_url}")
        print(f"  ‚ÑπÔ∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä telegram-bot-api –∑–∞–ø—É—â–µ–Ω:")
        print(f"      docker-compose ps telegram-bot-api")
        return False
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False


def check_bot_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...")
    
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '')
    local_api_url = os.getenv('TELEGRAM_LOCAL_API_URL', '')
    
    if not bot_token:
        print("  ‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return False
    
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ —Ö–æ—Å—Ç–µ, –∑–∞–º–µ–Ω—è–µ–º Docker –∏–º—è –Ω–∞ localhost
    if local_api_url and 'telegram-bot-api:' in local_api_url:
        local_api_url = local_api_url.replace('telegram-bot-api:', 'localhost:')
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π API –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        if local_api_url:
            base_url = f"{local_api_url.rstrip('/')}/bot{bot_token}"
        else:
            base_url = f"https://api.telegram.org/bot{bot_token}"
        
        response = requests.get(f"{base_url}/getMe", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                bot_info = data.get('result', {})
                print(f"  ‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω:")
                print(f"     –ò–º—è: @{bot_info.get('username')}")
                print(f"     ID: {bot_info.get('id')}")
                return True
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ API: {data.get('description')}")
                return False
        else:
            print(f"  ‚ùå HTTP {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False


def check_docker_compose():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    
    try:
        import subprocess
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å telegram-bot-api
        result = subprocess.run(
            ['docker-compose', 'ps', 'telegram-bot-api'],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if 'Up' in result.stdout:
            print("  ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä telegram-bot-api –∑–∞–ø—É—â–µ–Ω")
            return True
        elif 'Exit' in result.stdout:
            print("  ‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä telegram-bot-api –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("  ‚ÑπÔ∏è  –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d telegram-bot-api")
            return False
        else:
            print("  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
            print(f"  –í—ã–≤–æ–¥: {result.stdout}")
            return False
            
    except FileNotFoundError:
        print("  ‚ö†Ô∏è  docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        print("  ‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—Ä—É—á–Ω—É—é: docker-compose ps")
        return None
    except Exception as e:
        print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {str(e)}")
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "="*60)
    print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Telegram Bot API")
    print("="*60 + "\n")
    
    checks = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    checks.append(("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_env_vars()))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    docker_status = check_docker_compose()
    if docker_status is not None:
        checks.append(("Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", docker_status))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –õ–æ–∫–∞–ª—å–Ω—ã–π API
    checks.append(("–õ–æ–∫–∞–ª—å–Ω—ã–π Bot API", check_local_api()))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    checks.append(("–¢–æ–∫–µ–Ω –±–æ—Ç–∞", check_bot_token()))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò")
    print("="*60)
    
    passed = sum(1 for _, status in checks if status is True)
    total = len(checks)
    
    for name, status in checks:
        icon = "‚úÖ" if status else "‚ùå"
        print(f"{icon} {name}")
    
    print("\n" + "="*60)
    
    if passed == total:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –í–∞—à –±–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã –¥–æ 2 –ì–ë!")
        print("="*60 + "\n")
        return 0
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–π–¥–µ–Ω–æ {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫")
        print("üìñ –°–º–æ—Ç—Ä–∏—Ç–µ –ß–ï–ö–õ–ò–°–¢_2GB.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        print("="*60 + "\n")
        return 1


if __name__ == "__main__":
    sys.exit(main())

