"""–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞"""
import asyncio
import hashlib
import structlog
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes
)
from minio import Minio
import httpx
from datetime import datetime

from bot.config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.JSONRenderer()
    ]
)

logger = structlog.get_logger()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WAITING_FOR_DESCRIPTION = 1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO –∫–ª–∏–µ–Ω—Ç–∞
minio_client = Minio(
    config.MINIO_ENDPOINT,
    access_key=config.MINIO_ACCESS_KEY,
    secret_key=config.MINIO_SECRET_KEY,
    secure=config.MINIO_SECURE
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ bucket
try:
    if not minio_client.bucket_exists(config.MINIO_BUCKET):
        minio_client.make_bucket(config.MINIO_BUCKET)
        logger.info("Created MinIO bucket", bucket=config.MINIO_BUCKET)
except Exception as e:
    logger.error("Error checking/creating MinIO bucket", error=str(e))


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    logger.info("User started bot", user_id=user.id, username=user.username)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube Shorts "
        "–∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.\n\n"
        "üìπ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ (–¥–æ 2 –ì–ë), –∏ —è –æ–ø—É–±–ª–∏–∫—É—é –µ–≥–æ!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "ü§ñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ (—Ñ–∞–π–ª–æ–º –∏–ª–∏ –∫–∞–∫ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        "2Ô∏è‚É£ –Ø –ø–æ–ø—Ä–æ—à—É —Ç–µ–±—è –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
        "4Ô∏è‚É£ –Ø –∑–∞–≥—Ä—É–∂—É –≤–∏–¥–µ–æ –∏ –æ–ø—É–±–ª–∏–∫—É—é –Ω–∞ YouTube Shorts\n\n"
        "üí° *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∏–¥–µ–æ:*\n"
        "‚Ä¢ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 9:16 (1080√ó1920)\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –¥–æ 2 –ì–ë\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è Shorts\n\n"
        "‚ùì *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* –Ω–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        parse_mode="Markdown"
    )


async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
    )
    return ConversationHandler.END


async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ"""
    user = update.effective_user
    message = update.message
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∏–¥–µ–æ
    video = None
    if message.video:
        video = message.video
        video_type = "video"
    elif message.video_note:
        video = message.video_note
        video_type = "video_note"
    elif message.document and message.document.mime_type and message.document.mime_type.startswith("video/"):
        video = message.document
        video_type = "document"
    else:
        await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª.")
        return ConversationHandler.END
    
    logger.info(
        "Received video",
        user_id=user.id,
        video_type=video_type,
        file_size=video.file_size,
        file_id=video.file_id
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (2 –ì–ë)
    if video.file_size > 2 * 1024 * 1024 * 1024:
        await message.reply_text(
            "‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 2 –ì–ë"
        )
        return ConversationHandler.END
    
    await message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π Bot API
        file = await context.bot.get_file(video.file_id)
        file_path = file.file_path
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        file_bytes = await file.download_as_bytearray()
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
        video_hash = hashlib.sha256(file_bytes).hexdigest()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º S3 –∫–ª—é—á
        timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
        s3_key = f"videos/{user.id}/{timestamp}_{video_hash[:16]}.mp4"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ MinIO
        from io import BytesIO
        minio_client.put_object(
            config.MINIO_BUCKET,
            s3_key,
            BytesIO(file_bytes),
            length=len(file_bytes),
            content_type="video/mp4"
        )
        
        logger.info(
            "Video uploaded to MinIO",
            user_id=user.id,
            s3_key=s3_key,
            video_hash=video_hash
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['video_data'] = {
            'file_id': video.file_id,
            'file_size': video.file_size,
            'video_hash': video_hash,
            's3_key': s3_key,
            'duration': getattr(video, 'duration', None),
            'telegram_message_id': str(message.message_id)
        }
        
        await message.reply_text(
            "‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
            "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ *–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ* –¥–ª—è –≤–∏–¥–µ–æ.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "*–ú–æ–π –∫—Ä—É—Ç–æ–π –≤–∏–¥–æ—Å*\n"
            "–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–µ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è YouTube Shorts #shorts #–≤–∏–¥–µ–æ",
            parse_mode="Markdown"
        )
        
        return WAITING_FOR_DESCRIPTION
        
    except Exception as e:
        logger.error(
            "Error processing video",
            user_id=user.id,
            error=str(e),
            error_type=type(e).__name__
        )
        await message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END


async def handle_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    user = update.effective_user
    message = update.message
    description_text = message.text.strip()
    
    if not description_text:
        await message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return WAITING_FOR_DESCRIPTION
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    lines = description_text.split('\n', 1)
    title = lines[0].strip()
    description = lines[1].strip() if len(lines) > 1 else title
    
    video_data = context.user_data.get('video_data')
    if not video_data:
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start")
        return ConversationHandler.END
    
    logger.info(
        "Received description",
        user_id=user.id,
        title=title
    )
    
    await message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                f"{config.API_BASE_URL}/ingest",
                json={
                    "video_hash": video_data['video_hash'],
                    "s3_key": video_data['s3_key'],
                    "file_size": video_data['file_size'],
                    "duration": video_data.get('duration'),
                    "platform": "youtube",
                    "title": title,
                    "description": description,
                    "tags": ["shorts"],
                    "telegram_user_id": str(user.id),
                    "telegram_message_id": video_data['telegram_message_id']
                },
                headers={
                    "X-Service-Token": config.SERVICE_TOKEN,
                    "Content-Type": "application/json"
                }
            )
        
        if response.status_code == 200:
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            if data is None:
                logger.error("API returned 200 but null body", user_id=user.id)
                await message.reply_text(
                    "‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (200 –Ω–æ null). "
                    "–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return ConversationHandler.END
            
            submission_id = data.get('submission_id')
            
            logger.info(
                "Video submitted successfully",
                user_id=user.id,
                submission_id=submission_id
            )
            
            await message.reply_text(
                f"‚úÖ *–í–∏–¥–µ–æ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!*\n\n"
                f"üÜî ID –∑–∞—è–≤–∫–∏: `{submission_id}`\n"
                f"üì∫ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: YouTube Shorts\n"
                f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n\n"
                f"‚è≥ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
                f"–Ø —É–≤–µ–¥–æ–º–ª—é —Ç–µ–±—è, –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!",
                parse_mode="Markdown"
            )
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
            context.job_queue.run_once(
                check_status_callback,
                when=30,
                data={
                    'submission_id': submission_id,
                    'chat_id': message.chat_id,
                    'user_id': user.id
                }
            )
            
        else:
            logger.error(
                "API error",
                user_id=user.id,
                status_code=response.status_code,
                response=response.text
            )
            await message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ API ({response.status_code}):\n{response.text}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    except Exception as e:
        logger.error(
            "Error submitting video",
            user_id=user.id,
            error=str(e),
            error_type=type(e).__name__
        )
        await message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END


async def check_status_callback(context: ContextTypes.DEFAULT_TYPE):
    """Callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    job_data = context.job.data
    submission_id = job_data['submission_id']
    chat_id = job_data['chat_id']
    user_id = job_data['user_id']
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(
                f"{config.API_BASE_URL}/status/{submission_id}",
                headers={"X-Service-Token": config.SERVICE_TOKEN}
            )
        
        if response.status_code == 200:
            data = response.json()
            status = data.get('status')
            
            logger.info(
                "Status check",
                user_id=user_id,
                submission_id=submission_id,
                status=status
            )
            
            if status == "COMPLETED":
                public_url = data.get('public_url', 'N/A')
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üéâ *–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!*\n\n"
                         f"üÜî ID: `{submission_id}`\n"
                         f"üîó –°—Å—ã–ª–∫–∞: {public_url}\n\n"
                         f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üöÄ",
                    parse_mode="Markdown"
                )
            elif status == "FAILED":
                error_msg = data.get('error_message', 'Unknown error')
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏*\n\n"
                         f"üÜî ID: `{submission_id}`\n"
                         f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg}\n\n"
                         f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="Markdown"
                )
            else:
                # –ï—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–∑–∂–µ
                context.job_queue.run_once(
                    check_status_callback,
                    when=30,
                    data=job_data
                )
    
    except Exception as e:
        logger.error(
            "Error checking status",
            user_id=user_id,
            submission_id=submission_id,
            error=str(e)
        )


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("Exception while handling an update", exc_info=context.error)
    
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Starting Telegram bot")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_builder = Application.builder().token(config.BOT_TOKEN)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Bot API –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if config.LOCAL_API_URL:
        app_builder = (
            app_builder
            .base_url(f"{config.LOCAL_API_URL}/bot")
            .base_file_url(f"{config.LOCAL_API_URL}/file/bot")
        )
    
    application = app_builder.build()
    
    # Conversation handler –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(
                filters.VIDEO | filters.VIDEO_NOTE | filters.Document.VIDEO,
                handle_video
            )
        ],
        states={
            WAITING_FOR_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_description)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_command)]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Bot started successfully")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()


