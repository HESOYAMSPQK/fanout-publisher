"""TikTok –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Content Posting API"""
import os
import json
import time
import requests
import structlog
from typing import Dict, Optional, Callable
import hashlib

logger = structlog.get_logger()


class TikTokPublisher:
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞ TikTok —á–µ—Ä–µ–∑ Content Posting API"""
    
    # API endpoints
    API_BASE_URL = "https://open.tiktokapis.com"
    OAUTH_URL = "https://www.tiktok.com/v2/auth/authorize"
    TOKEN_URL = "https://open.tiktokapis.com/v2/oauth/token/"
    
    # API –≤–µ—Ä—Å–∏—è
    API_VERSION = "v2"
    
    def __init__(
        self,
        client_key: str,
        client_secret: str,
        access_token: str,
        refresh_token: Optional[str] = None,
        on_token_refresh: Optional[Callable[[str, str], None]] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TikTok publisher
        
        Args:
            client_key: TikTok App Client Key
            client_secret: TikTok App Client Secret  
            access_token: OAuth Access Token –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            refresh_token: OAuth Refresh Token –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            on_token_refresh: Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (access_token, refresh_token)
        """
        self.client_key = client_key
        self.client_secret = client_secret
        self.access_token = access_token
        self.refresh_token = refresh_token
        self.on_token_refresh = on_token_refresh
    
    def _refresh_access_token(self) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å access token –∏—Å–ø–æ–ª—å–∑—É—è refresh token
        
        Returns:
            True –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, False –∏–Ω–∞—á–µ
        """
        if not self.refresh_token:
            logger.warning("Refresh token not available, cannot refresh access token")
            return False
        
        logger.info("Attempting to refresh TikTok access token")
        
        try:
            data = {
                'client_key': self.client_key,
                'client_secret': self.client_secret,
                'grant_type': 'refresh_token',
                'refresh_token': self.refresh_token
            }
            
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Cache-Control': 'no-cache'
            }
            
            response = requests.post(self.TOKEN_URL, data=data, headers=headers, timeout=30)
            result = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
            if 'error' in result:
                error_code = result.get('error', '')
                error_msg = result.get('error_description', '')
                logger.error(
                    "Failed to refresh token",
                    error_code=error_code,
                    error_msg=error_msg
                )
                return False
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
            if 'data' in result:
                token_info = result['data']
            else:
                token_info = result
            
            new_access_token = token_info.get('access_token')
            new_refresh_token = token_info.get('refresh_token')
            expires_in = token_info.get('expires_in', 0)
            
            if not new_access_token:
                logger.error("No access token in refresh response")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
            old_access_token = self.access_token
            self.access_token = new_access_token
            
            if new_refresh_token:
                self.refresh_token = new_refresh_token
            
            logger.info(
                "‚úÖ Access token refreshed successfully",
                expires_in=expires_in,
                expires_in_hours=expires_in // 3600
            )
            
            # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ .env –∏–ª–∏ –ë–î)
            if self.on_token_refresh:
                try:
                    self.on_token_refresh(self.access_token, self.refresh_token)
                    logger.info("Token refresh callback executed successfully")
                except Exception as e:
                    logger.warning(
                        "Token refresh callback failed",
                        error=str(e)
                    )
            
            return True
            
        except requests.RequestException as e:
            logger.error("Token refresh request failed", error=str(e))
            return False
        except Exception as e:
            logger.error(
                "Unexpected error during token refresh",
                error=str(e),
                error_type=type(e).__name__
            )
            return False
        
    def _api_request(
        self,
        method: str,
        endpoint: str,
        data: Optional[dict] = None,
        files: Optional[dict] = None,
        headers: Optional[dict] = None,
        retry_on_token_error: bool = True
    ) -> dict:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ TikTok API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        Args:
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST)
            endpoint: API endpoint
            data: JSON –¥–∞–Ω–Ω—ã–µ
            files: –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            headers: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            retry_on_token_error: –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –û—Ç–≤–µ—Ç API
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ API
        """
        url = f"{self.API_BASE_URL}/{endpoint}"
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        default_headers = {
            'Authorization': f'Bearer {self.access_token}',
        }
        
        if headers:
            default_headers.update(headers)
        
        try:
            if method.upper() == 'GET':
                response = requests.get(url, headers=default_headers, params=data, timeout=30)
            elif method.upper() == 'POST':
                if files:
                    # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Content-Type (requests —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç multipart/form-data)
                    response = requests.post(url, headers=default_headers, data=data, files=files, timeout=600)
                else:
                    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω x-www-form-urlencoded, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ form-data
                    content_type = default_headers.get('Content-Type')
                    logger.info("Sending POST request", url=url, data=data)
                    if content_type == 'application/x-www-form-urlencoded':
                        response = requests.post(url, headers=default_headers, data=data, timeout=30)
                    else:
                        default_headers['Content-Type'] = 'application/json'
                        response = requests.post(url, headers=default_headers, json=data, timeout=30)
            else:
                raise ValueError(f"Unsupported HTTP method: {method}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info("Response received", status_code=response.status_code)
            
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            if not response.ok:
                try:
                    error_body = response.json()
                    error_code = error_body.get('error', {}).get('code', '')
                    error_msg = error_body.get('error', {}).get('message', '')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
                    token_related_errors = [
                        'access_token_invalid',
                        'access_token_expired', 
                        'invalid_token',
                        'token_expired',
                        'unauthorized'
                    ]
                    
                    is_token_error = error_code in token_related_errors or 'token' in error_code.lower()
                    
                    logger.error(
                        "TikTok API error response",
                        status_code=response.status_code,
                        error_code=error_code,
                        error_message=error_msg,
                        is_token_error=is_token_error,
                        error_body=error_body,
                        url=url
                    )
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –µ—Å—Ç—å refresh_token - –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
                    if is_token_error and retry_on_token_error and self.refresh_token:
                        logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...")
                        
                        if self._refresh_access_token():
                            logger.info("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å...")
                            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ retry)
                            return self._api_request(
                                method=method,
                                endpoint=endpoint,
                                data=data,
                                files=files,
                                headers=headers,
                                retry_on_token_error=False  # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                            )
                        else:
                            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
                    
                except:
                    logger.error(
                        "TikTok API error response (non-JSON)",
                        status_code=response.status_code,
                        text=response.text[:500],
                        url=url
                    )
            
            response.raise_for_status()
            
            result = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ TikTok API
            if result.get('error'):
                error = result['error']
                error_code = error.get('code', '')
                error_message = error.get('message', '')

                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–∞—é—Ç wrapper error: { code: 'ok' } –ø—Ä–∏ status_code=200
                # –ù–µ —Ç—Ä–∞–∫—Ç—É–µ–º —Ç–∞–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ –æ—à–∏–±–∫—É
                normalized_code = str(error_code).lower()
                if normalized_code in ('ok', 'success', '0', '200', ''):
                    return result
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
                token_related_errors = [
                    'access_token_invalid',
                    'access_token_expired', 
                    'invalid_token',
                    'token_expired',
                    'unauthorized'
                ]
                
                is_token_error = error_code in token_related_errors or 'token' in error_code.lower()
                
                # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –µ—Å—Ç—å refresh_token - –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
                if is_token_error and retry_on_token_error and self.refresh_token:
                    logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ JSON, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...")
                    
                    if self._refresh_access_token():
                        logger.info("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å...")
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ retry)
                        return self._api_request(
                            method=method,
                            endpoint=endpoint,
                            data=data,
                            files=files,
                            headers=headers,
                            retry_on_token_error=False  # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                        )
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
                
                if is_token_error:
                    error_msg = f"‚ùå –û–®–ò–ë–ö–ê –¢–û–ö–ï–ù–ê TikTok! –ö–æ–¥: {error_code} - {error_message}\n\n"
                    error_msg += "üîë –í–∞—à —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!\n"
                    if self.refresh_token:
                        error_msg += "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: python scripts/get_tiktok_token_ngrok.py"
                    else:
                        error_msg += "–î–æ–±–∞–≤—å—Ç–µ TIKTOK_REFRESH_TOKEN –≤ .env –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"
                else:
                    error_msg = f"TikTok API Error: {error_code} - {error_message}"
                
                logger.error(
                    "TikTok API error",
                    error_code=error_code,
                    error_message=error_message,
                    is_token_error=is_token_error,
                    log_id=result.get('log_id')
                )
                raise Exception(error_msg)
            
            return result
            
        except requests.RequestException as e:
            logger.error("TikTok API request failed", error=str(e), url=url)
            raise Exception(f"TikTok API request failed: {str(e)}")
    
    def publish_video(
        self,
        video_path: str,
        title: str,
        description: str = "",
        privacy_level: str = "SELF_ONLY",
        disable_duet: bool = False,
        disable_comment: bool = False,
        disable_stitch: bool = False,
        brand_content: bool = False,
        brand_organic: bool = False
    ) -> Dict[str, str]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞ TikTok
        
        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, TikTok –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ description)
            description: –û–ø–∏—Å–∞–Ω–∏–µ/caption –≤–∏–¥–µ–æ (–¥–æ 2200 —Å–∏–º–≤–æ–ª–æ–≤)
            privacy_level: –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:
                - SELF_ONLY: —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä (–ø—Ä–∏–≤–∞—Ç–Ω–æ–µ)
                - MUTUAL_FOLLOW_FRIENDS: –≤–∑–∞–∏–º–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
                - FOLLOWER_OF_CREATOR: –≤—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
                - PUBLIC_TO_EVERYONE: –ø—É–±–ª–∏—á–Ω–æ–µ
            disable_duet: –û—Ç–∫–ª—é—á–∏—Ç—å –¥—É—ç—Ç—ã
            disable_comment: –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            disable_stitch: –û—Ç–∫–ª—é—á–∏—Ç—å —Å—Ç–∏—á
            brand_content: –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            brand_organic: –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –±—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            
        Returns:
            Dict —Å platform_job_id –∏ public_url
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
        """
        logger.info(
            "Starting TikTok upload",
            title=title,
            video_path=video_path,
            privacy_level=privacy_level
        )
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if not os.path.exists(video_path):
                raise FileNotFoundError(f"Video file not found: {video_path}")
            
            file_size = os.path.getsize(video_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (TikTok: –º–∞–∫—Å–∏–º—É–º 4 –ì–ë –¥–ª—è –≤–∏–¥–µ–æ –¥–æ 10 –º–∏–Ω—É—Ç)
            if file_size > 4 * 1024 * 1024 * 1024:
                raise Exception("Video file too large (max 4 GB)")
            
            logger.info("Video file validated", size=file_size)
            
            # –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–ª—É—á–µ–Ω–∏–µ upload URL)
            logger.info("Initializing TikTok upload")
            
            # TikTok API –¢–†–ï–ë–£–ï–¢ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ (title/description)!
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è TikTok
            video_caption = ""
            if title and title.strip():
                video_caption = title.strip()
            if description and description.strip():
                if video_caption:
                    video_caption += "\n\n" + description.strip()
                else:
                    video_caption = description.strip()
            
            # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if not video_caption:
                video_caption = "–í–∏–¥–µ–æ"
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ TikTok: –º–∞–∫—Å–∏–º—É–º 2200 —Å–∏–º–≤–æ–ª–æ–≤
            if len(video_caption) > 2200:
                video_caption = video_caption[:2197] + "..."
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º post_info –¥–ª—è TikTok API v2
            # –ò–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ jstolpe: –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "title"
            post_info = {
                "title": video_caption,
                "privacy_level": privacy_level,
                "disable_duet": disable_duet,
                "disable_comment": disable_comment,
                "disable_stitch": disable_stitch
            }
            
            logger.info(
                "TikTok post_info prepared",
                description=video_caption[:100],  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                description_length=len(video_caption),
                privacy_level=privacy_level
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º source_info
            # –ò–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ jstolpe: –¥–ª—è FILE_UPLOAD –Ω—É–∂–Ω—ã chunk_size –∏ total_chunk_count
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Ü–µ–ª–∏–∫–æ–º, chunk_size = file_size, total_chunk_count = 1
            source_info = {
                "source": "FILE_UPLOAD",
                "video_size": file_size,
                "chunk_size": file_size,
                "total_chunk_count": 1
            }

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ x-www-form-urlencoded —Å JSON-—Å—Ç—Ä–æ–∫–∞–º–∏
            form_payload = {
                "post_info": json.dumps(post_info, ensure_ascii=False),
                "source_info": json.dumps(source_info)
            }

            logger.info(
                "About to send init request",
                post_info_keys=list(post_info.keys()),
                source_info_keys=list(source_info.keys()),
                title_repr=repr(post_info['title'][:50] if post_info.get('title') else '')
            )

            init_response = self._api_request(
                'POST',
                f'{self.API_VERSION}/post/publish/video/init/',
                data=form_payload,
                headers={"Content-Type": "application/x-www-form-urlencoded"}
            )
            
            upload_url = init_response.get('data', {}).get('upload_url')
            publish_id = init_response.get('data', {}).get('publish_id')
            
            if not upload_url or not publish_id:
                raise Exception("Failed to get upload URL from TikTok")
            
            logger.info(
                "Got upload URL",
                publish_id=publish_id
            )
            
            # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
            logger.info("Uploading video to TikTok", size=file_size, upload_url=upload_url)
            
            with open(video_path, 'rb') as video_file:
                # TikTok upload —Ç—Ä–µ–±—É–µ—Ç Content-Range –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
                content_range = f"bytes 0-{file_size - 1}/{file_size}"
                upload_headers = {
                    'Content-Type': 'video/mp4',
                    'Content-Length': str(file_size),
                    'Content-Range': content_range
                }
                logger.info("PUT upload start", content_range=content_range)
                upload_response = requests.put(
                    upload_url,
                    data=video_file,
                    headers=upload_headers,
                    timeout=600  # 10 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
                )
                logger.info("PUT upload finished", status_code=upload_response.status_code)
                upload_response.raise_for_status()
            
            logger.info("Video uploaded successfully", publish_id=publish_id)
            
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            # TikTok –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL (TikTok –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É —Å—Ä–∞–∑—É)
            # –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ creator center
            public_url = f"https://www.tiktok.com/@me/video/{publish_id}"  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            
            logger.info(
                "TikTok upload completed",
                publish_id=publish_id,
                status="processing"
            )
            
            return {
                'platform_job_id': publish_id,
                'public_url': public_url,
                'status': 'processing'  # TikTok –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            }
            
        except requests.RequestException as e:
            logger.error(
                "Upload request error",
                error=str(e)
            )
            raise Exception(f"TikTok upload request error: {str(e)}")
            
        except Exception as e:
            logger.error(
                "Upload error",
                error=str(e),
                error_type=type(e).__name__
            )
            raise
    
    def get_video_status(self, publish_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ
        
        Args:
            publish_id: ID –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ TikTok
            
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            endpoint = f'{self.API_VERSION}/post/publish/status/{publish_id}/'
            
            response = self._api_request('POST', endpoint)
            
            data = response.get('data', {})
            
            status = data.get('status', 'unknown')
            
            # TikTok —Å—Ç–∞—Ç—É—Å—ã: PROCESSING_UPLOAD, PUBLISH_COMPLETE, FAILED, etc.
            
            return {
                'status': status,
                'publish_id': publish_id,
                'fail_reason': data.get('fail_reason'),
                'publicaly_available_post_id': data.get('publicaly_available_post_id', [])
            }
            
        except Exception as e:
            logger.error(
                "Error getting video status",
                publish_id=publish_id,
                error=str(e)
            )
            return {'status': 'error', 'error': str(e)}
    
    def get_creator_info(self) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ creator –∞–∫–∫–∞—É–Ω—Ç–µ
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        try:
            endpoint = f'{self.API_VERSION}/user/info/'
            
            response = self._api_request('GET', endpoint, data={'fields': 'open_id,union_id,avatar_url,display_name'})
            
            data = response.get('data', {}).get('user', {})
            
            return {
                'open_id': data.get('open_id'),
                'display_name': data.get('display_name'),
                'avatar_url': data.get('avatar_url')
            }
            
        except Exception as e:
            logger.error("Error getting creator info", error=str(e))
            return {'error': str(e)}



